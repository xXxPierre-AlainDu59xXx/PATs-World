<cfg>
  <xmls>
    <xml id="25050" userelpath="1">XML\logon.xml</xml>
    <xml id="25051" userelpath="1">XML\logoff.xml</xml>
    <xml id="999" userelpath="1">XML\logoff.xml</xml>
    <xml id="666" userelpath="0">C:\VSS\Islands\KOD\cmKOD_Apps\workspace\SyncSvcDsp\external_config.xml</xml>
  </xmls>
  <xsls>
    <xsl id="123" userelpath="1">xsl\copy.xsl</xsl>
  </xsls>
  <app_syncsvcdsp_details xmlid="">
    <cfg id="1">
      <request>
        <endpointurl>http://muc020t:8080/CMObjects.wsdl</endpointurl>
        <winhttpauthscheme>0</winhttpauthscheme>
        <basicauthlogin/>
        <basicauthpassword/>
        <instance>8B7B7AE3-9A76-415A-9B40-770FE5D1AA64</instance>
        <login>ralf_ares@urm.test</login>
        <password enc="1">3ZgMUKnpjkz3QGH96Q0HXQ==</password>
        <call>
          <cmrequest cmd="1" instance="" session=""><fingerprint>51.1</fingerprint></cmrequest>
        </call>
        <logon>
          <cmrequest cmd="1" instance="" session=""><fingerprint>0.0</fingerprint><login/><password/></cmrequest>
        </logon>
        <logoff>
          <cmrequest cmd="1" instance="" session=""><fingerprint>1.0</fingerprint><session/></cmrequest>
        </logoff>
      </request>
      <db>Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=cmImports;Data Source=MUC004</db>
      <source>*</source>
      <number>-1</number>
      <sql_a>
        <![CDATA[ 


SET NOCOUNT ON

-- UPDATE [cmImports].[dbo].[myImportedADData] SET status=null, info=null where status is not null

declare @count int
declare @objguid nvarchar(36)
declare @flag int
declare @source nvarchar(256)

declare @status_success int
declare @status_locked int
declare @status_error_failed int
declare @status_error_still_locked int
declare @status_pending int

-- set different status values
set @status_success = 1
set @status_locked = 2
set @status_error_failed = 3
set @status_error_still_locked = 4
set @status_pending = 5

-- default
set @flag = 0
-- filter
set @source = '%SOURCE%'

while (@flag = 0)
begin

  -- reset exit criterium
  set @objguid = null

  -- determine which objectGUID has to be executed next. one recordset is enough.
  Select top 1 @objguid=objectguid from myImportedADData where status is null and source like @source order by usncreated, usnchanged, objectguid

  if @objguid is null
  begin
    set @flag = 1
  end
  else -- if @objguid is null
  begin

    -- verification step I : any recordset still locked ?
    select @count = count(*) from myImportedADData where status = @status_locked and objectguid = @objguid and source like @source
    if @count>0
    begin
      update myImportedADData set status = @status_error_still_locked where status = @status_locked and objectguid = @objguid and source like @source
    end

    -- verification step II : any recordset with error ?
    select @count = count(*) from myImportedADData where ( status = @status_error_failed or status = @status_error_still_locked ) and objectguid = @objguid and source like @source
    if @count>0
    begin
      update myImportedADData set status = @status_pending where status is null and objectguid = @objguid and source like @source
    end

    -- verification step III : more than one activity = 1 ? (activity 1 : add)
    select @count = count(*) from myImportedADData where activity = 1 and status is NULL and objectguid = @objguid and source like @source
    if @count>1
    begin
      update myImportedADData set status = @status_pending where status is null and objectguid = @objguid and source like @source
    end

    -- verification step IV : more than one activity = 3 ? (activity 3 : delete)
    select @count = count(*) from myImportedADData where activity = 3 and status is NULL and objectguid = @objguid and source like @source
    if @count>1
    begin
      update myImportedADData set status = @status_pending where status is null and objectguid = @objguid and source like @source
    end

    -- still any data after all the verifications available?
    select @count = count(*) from myImportedADData where status is NULL and objectguid = @objguid and source like @source
    if @count>0
    begin
      -- lock all recordsets
      update myImportedADData set status = @status_locked where status is NULL and objectguid = @objguid and source like @source
      -- return all recordsets
      Select * from myImportedADData where status = @status_locked and objectguid = @objguid and source like @source order by usncreated, usnchanged
      -- set flag for while-loop
      set @flag = 1
    end
  end -- else -- if @objguid is null
end -- while > begin ...


SET NOCOUNT OFF


      ]]>
      </sql_a>
      <sql_b>
        <![CDATA[ 

      SET NOCOUNT ON
      UPDATE myImportedADData SET status=%STATUS%, info=%INFO% where id = %ID%

      ]]>
      </sql_b>
    </cfg>
  </app_syncsvcdsp_details>
</cfg>
